shiny::runApp('E:/School/INFO478/a2-taingmat/disease-modeling')
runApp('E:/School/INFO478/a2-taingmat/disease-modeling')
runApp('E:/School/INFO478/a2-taingmat/disease-modeling')
shiny::runApp('E:/School/INFO478/a2-taingmat/disease-modeling')
runApp('E:/School/INFO478/a2-taingmat/disease-modeling')
runApp('E:/School/INFO478/a2-taingmat/disease-modeling')
runApp('E:/School/INFO478/a2-taingmat/disease-modeling')
runApp('E:/School/INFO478/a2-taingmat/disease-modeling')
# --- Low Birth Weight ---
# Load in Data
birth_weights = birthwt
library("dplyr")
library("ggplot2")
library("HSAUR")
library("MASS")
library("Epi")
# --- Tuberculosis ---
# Load in BCG Data
data("BCG", package = "HSAUR")
# Calculate the Odds Ratio for each study
BCG <- BCG %>%
mutate(odds_ratio = (BCGTB / (BCGTB + NoVaccTB)) / (BCGVacc / (BCGVacc + NoVacc)))
# Create historgram
BCG_odds_hist <- ggplot(BCG, aes(x = odds_ratio)) +
geom_histogram() +
ggtitle("BCG Odds Ratio Distribution") +
xlab("odds ratio") +
ylab("Count")
BCG_odds_hist
#Plotting Relationshop with latitude + year
BCG_lat <- ggplot(BCG, aes(x = Latitude, y = odds_ratio)) +
geom_line()
BCG_lat
BCG_year <- ggplot(BCG, aes(x = Year, y = odds_ratio)) +
geom_line()
BCG_year
#Calculate Relative Risks
BCG <- BCG %>%
mutate(relative_risk = (BCGTB / (BCGVacc)) / (NoVaccTB / (NoVacc)))
#Odds Ratio vs Relative Risk Scatter Plot
BCG_risk_odds <- ggplot(BCG, aes(x = odds_ratio, y = relative_risk)) +
geom_point()
BCG_risk_odds
# --- Low Birth Weight ---
# Load in Data
birth_weights = birthwt
birth_weights["smoke"]
sum(birth_weights["smoke"])
mean(birth_weights["smoke"])
sum(birth_weights["smoke"])
sum(birth_weights["bwt"])
mean(birth_weights["bwt"])
birth_weights["bwt"]
birth_weights[["bwt"]]
mean(birth_weights[["bwt"]])
mean_birth_wt <- mean(birth_weights[["bwt"]])
# Calculate Summary Statistics
prop_low_birth <- sum(birth_weights["low"]) / nrow(birth_weights)
prop_smoker <- sum(birth_weights["smoke"]) / nrow(birth_weights)
mean_birth_wt <- mean(birth_weights[["bwt"]])
a <- birth_weights %>% filter(smoke == 0)
View(a)
a <- birth_weights %>% filter(smoke == 0, low = TRUE)
a <- birth_weights %>% filter(smoke == 0, low == TRUE)
# Relative risk function
relative_risk <- function(df, predictor, binary) {
# Find risk ratio given exposure
exposed_true <- df %>% filter(predictor == binary, low == TRUE)
exposed_total <- df %>% filter(predictor == binary)
risk_given_exposure <- nrow(exposed_true) / nrow(exposed_total)
#Find risk ratio without expsoure
unexposed_true <- df %>% filter(predictor == -binary, low == TRUE)
unexposed_total <- df %>% filter(predictor == -binary)
risk_without_exposure <- nrow(unexposed_true) / nrow(unexposed_total)
return(risk_given_exposure / risk_without_exposure)
}
relative_risk(birth_weights, "smoke", TRUE)
relative_risk(birth_weights, "smoke", TRUE)
relative_risk(birth_weights, "smoke", FALSE)
df = birth_weights
predictor = "smoke"
binary = TRUE
# Find risk ratio given exposure
exposed_true <- df %>% filter(predictor == binary, low == TRUE)
exposed_total <- df %>% filter(predictor == binary)
# Find risk ratio given exposure
exposed_true <- df %>% filter("smoke" == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% filter(smoke == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% filter(eval("smoke") == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% filter(eval("smoke") == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% filter(_"smoke" == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% filter(-"smoke" == binary, low == TRUE)
install.packages("epitools")
# --- Endometrial Cancer ---
#Load in data
data(bdendo)
odds <- epitab(bdendo, method = "odds-ratio", rev = "b", verbose = "true")
library("Epi")
library("epitools")
odds <- epitab(bdendo, method = "odds-ratio", rev = "b", verbose = "true")
odds <- epitab(bdendo, method = "oddsratio", rev = "b", verbose = "true")
odds <- epitab(bdendo, method = "oddsratio", rev = "b", verbose = "true")
odds <- epitab(bdendo, method = "oddsratio", verbose = "true")
r243 <- matrix(c(12,2,7,9), 2, 2)
dimnames(r243) <- list(Diarrhea = c("Yes", "No"),
"Antibody level" = c("Low", "High")
)
r243
r243b <- t(r243)
r243b
epitab(r243, rev = "b", verbose = TRUE)
epitab(r243, method="riskratio",rev = "b", verbose = TRUE)
epitab(matrix(c(41, 15, 28010, 19017),2,2)[2:1,],
method="rateratio", verbose = TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% dplyr::filter("smoke" == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% dplyr::filter(smoke == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% dplyr::filter(as.name("smoke") == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% dplyr::filter(eval(parse("smoke")) == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% dplyr::filter(get("smoke") == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% dplyr::filter(get("smoke") == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% dplyr::filter(get("smoke") == binary, low == TRUE)
# Relative risk function
relative_risk <- function(df, predictor, binary) {
# Find risk ratio given exposure
exposed_true <- df %>% filter(get(predictor) == binary, low == TRUE)
exposed_total <- df %>% filter(get(predictor) == binary)
risk_given_exposure <- nrow(exposed_true) / nrow(exposed_total)
#Find risk ratio without expsoure
unexposed_true <- df %>% filter(get(predictor) == -binary, low == TRUE)
unexposed_total <- df %>% filter(get(predictor) == -binary)
risk_without_exposure <- nrow(unexposed_true) / nrow(unexposed_total)
return(risk_given_exposure / risk_without_exposure)
}
relative_risk(birth_weights, "smoke", FALSE)
relative_risk(birth_weights, "smoke", FALSE)
relative_risk(birth_weights, "smoke", TRUE)
relative_risk(birth_weights, "smoke", TRUE)
relative_risk(birth_weights, "smoke", FALSE)
df = birth_weights
predictor = "smoke"
binary = TRUE
# Find risk ratio given exposure
exposed_true <- df %>% filter(get(predictor) == binary, low == TRUE)
# Find risk ratio given exposure
exposed_true <- df %>% filter(get(predictor) == binary, low == TRUE)
exposed_total <- df %>% filter(get(predictor) == binary)
risk_given_exposure <- nrow(exposed_true) / nrow(exposed_total)
#Find risk ratio without expsoure
unexposed_true <- df %>% filter(get(predictor) == -binary, low == TRUE)
unexposed_total <- df %>% filter(get(predictor) == -binary)
risk_without_exposure <- nrow(unexposed_true) / nrow(unexposed_total)
#Find risk ratio without expsoure
unexposed_true <- df %>% filter(get(predictor) == !binary, low == TRUE)
unexposed_total <- df %>% filter(get(predictor) == !binary)
risk_without_exposure <- nrow(unexposed_true) / nrow(unexposed_total)
return(risk_given_exposure / risk_without_exposure)
# Relative risk function
relative_risk <- function(df, predictor, binary) {
# Find risk ratio given exposure
exposed_true <- df %>% filter(get(predictor) == binary, low == TRUE)
exposed_total <- df %>% filter(get(predictor) == binary)
risk_given_exposure <- nrow(exposed_true) / nrow(exposed_total)
#Find risk ratio without expsoure
unexposed_true <- df %>% filter(get(predictor) == !binary, low == TRUE)
unexposed_total <- df %>% filter(get(predictor) == !binary)
risk_without_exposure <- nrow(unexposed_true) / nrow(unexposed_total)
return(risk_given_exposure / risk_without_exposure)
}
relative_risk(birth_weights, "smoke", TRUE)
relative_risk(birth_weights, "smoke", FALSE)
odds <- epitab(bdendo, method = "oddsratio", verbose = "true")
# Calculate Relative Risks
smoking_risk <- relative_risk(birth_weights, "smoke", TRUE)
hypertension_risk <- relative_risk(birth_weights, "ht", TRUE)
birth_weights <- birth_weights %>% mutate(test = ftv > 0)
birth_weights <- birth_weights %>% mutate(no_prenatal_care = (ftv == 0))
noprenatal_risk <- relative_risk(birth_weights, "no_prenatal_care", TRUE)
# Make boolean value for those below 20
birth_weights <- birth_weights %>% mutate(under_20 = (age < 20))
birth_pre_20_risk <- relative_risk(birth_weights, "", TRUE)
# Calculate Relative Risks
smoking_risk <- relative_risk(birth_weights, "smoke", TRUE)
hypertension_risk <- relative_risk(birth_weights, "ht", TRUE)
# Make boolean value for those who did not attend pre natal care
birth_weights <- birth_weights %>% mutate(no_prenatal_care = (ftv == 0))
noprenatal_risk <- relative_risk(birth_weights, "no_prenatal_care", TRUE)
# Make boolean value for those below 20
birth_weights <- birth_weights %>% mutate(under_20 = (age < 20))
birth_pre_20_risk <- relative_risk(birth_weights, "under_20", TRUE)
# Calculate Relative Risks
lb_smoking_risk <- relative_risk(birth_weights, "smoke", TRUE)
lb_hypertension_risk <- relative_risk(birth_weights, "ht", TRUE)
# Make boolean value for those who did not attend pre natal care
lb_birth_weights <- birth_weights %>% mutate(no_prenatal_care = (ftv == 0))
lb_noprenatal_risk <- relative_risk(birth_weights, "no_prenatal_care", TRUE)
# Make boolean value for those below 20
lb_birth_weights <- birth_weights %>% mutate(under_20 = (age < 20))
lb_birth_pre_20_risk <- relative_risk(birth_weights, "under_20", TRUE)
# --- Endometrial Cancer ---
#Load in data
data(bdendo)
table(r243b)
# Make well formatted table
names = c("Risk Given Smoking", "Risk Given Hypertension", "Risk given no prenatal care visits", "Risk Given birth before 20")
data = c(lb_smoking_risk, lb_hypertension_risk, lb_noprenatal_risk, lb_birth_pre_20_risk)
a = data.frame(c(names, data))
View(a)
a = data.frame(names, data)
View(a)
table(a)
table(names, data)
table(names, data)
# Make well formatted table
names = c("Risk Given Smoking", "Risk Given Hypertension", "Risk given no prenatal care visits", "Risk Given birth before 20")
data = c(lb_smoking_risk, lb_hypertension_risk, lb_noprenatal_risk, lb_birth_pre_20_risk)
table(names, data)
source('E:/School/INFO478/a3-taingmat/analysis.R')
source('E:/School/INFO478/a3-taingmat/analysis.R')
source('~/.active-rstudio-document', echo=TRUE)
plot(BXG_lat)
plot(BCG_lat)
plot(BCG_year)
#Plotting Relationshop with latitude + year
BCG_lat <- ggplot(BCG, aes(x = Latitude, y = odds_ratio)) +
geom_line() +
ggtitle("Latitude vs BCG Odds Ratio") +
xlab("Latitude") +
ylab("odds ratio")
BCG_year <- ggplot(BCG, aes(x = Year, y = odds_ratio)) +
geom_line() +
ggtitle("Year vs BCG Odds Ratio") +
xlab("Year") +
ylab("odds ratio")
BCG_year <- ggplot(BCG, aes(x = Year, y = odds_ratio)) +
geom_line() +
ggtitle("Year vs BCG Odds Ratio") +
xlab("Year") +
ylab("odds ratio")
#Plotting Relationshop with latitude + year
BCG_lat <- ggplot(BCG, aes(x = Latitude, y = odds_ratio)) +
geom_line() +
ggtitle("Latitude vs BCG Odds Ratio") +
xlab("Latitude") +
ylab("odds ratio")
# Make well formatted table
names = c("Risk Given Smoking", "Risk Given Hypertension", "Risk given no prenatal care visits", "Risk Given birth before 20")
data = c(lb_smoking_risk, lb_hypertension_risk, lb_noprenatal_risk, lb_birth_pre_20_risk)
a = data.frame(names, data)
View(a)
table = data.frame(names, data)
library("knitr")
kable(table)
source('E:/School/INFO478/a3-taingmat/analysis.R')
source('E:/School/INFO478/a3-taingmat/analysis.R')
odds <- epitab(y = bdendo$hyp, x = bdendo$d, method = "oddsratio", verbose = "FALSE")
View(odds)
View(bdendo)
hyp_odds <- epitab(y = bdendo$hyp, x = bdendo$d, method = "oddsratio", verbose = "FALSE")
gallBladder_odds <- epitab(y = bdendo$gall, x = bdendo$d, method = "oddsratio", verbose = "FALSE")
obesity_odds <- epitab(y = bdendo$ob, x = bdendo$d, method = "oddsratio", verbose = "FALSE")
View(obesity_odds)
hyp_odds
hyp_odds$tab
hyp_odds$tab["oddsratio"]
hyp_odds$tab[oddsratio]
hyp_odds$tab %>% select(oddsratio) %>% filter(Predictor == 1)
hyp_odds$tab %>% select("oddsratio") %>% filter(Predictor == 1)
hyp_odds$tab %>% select("oddsratio")
hyp_odds$tab %>% select("oddsratio")
hyp_odds$tab %>% select("oddsratio") %>% filter(Predictor == 1)
hyp_odds$tab
hyp_odds$tab[1]
hyp_odds$tab[5]
hyp_odds$tab[1]
hyp_odds$tab[2]
hyp_odds$tab[3]
data.frame(hyp_odds$tab)
data.frame(hyp_odds$tab) %>% select(oddsratio)
data.frame(hyp_odds$tab) %>% select("oddsratio")
data.frame(hyp_odds$tab)
data.frame(hyp_odds$tab) %>% filter(Priority > 1)
shiny::runApp('C:/Users/Matth/Desktop/INFO478/info478-project/eda')
runApp('C:/Users/Matth/Desktop/INFO478/info478-project/eda')
source("causes.R")
setwd("~/../Desktop/INFO478/info478-project/eda")
runApp()
source("causes.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("gdata")
install.packages("rworldmap")
install.packages("classInt")
runApp()
runApp()
install.packages("tidyverse")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/Matth/Downloads')
runApp()
for (i in countries) {
# concerned_causes = c("Neonatal disorders", "Maternal and neonatal disorders", "Malaria")
country_gbd_dalys <- gbd %>% filter(location == i)
total_dalys = sum(country_gbd_dalys$val)
country_gbd_dalys <- country_gbd_dalys %>%
mutate(percentage_contribution = val / total_dalys)
percent_contr = rbind(percent_contr, country_gbd_dalys)
}
# By country / grouped
countries <- unique(gbd_dalys$location)
# Calculate percent for every country
countries <- unique(gbd$location)
percent_contr <- data.frame()
for (i in countries) {
# concerned_causes = c("Neonatal disorders", "Maternal and neonatal disorders", "Malaria")
country_gbd_dalys <- gbd %>% filter(location == i)
total_dalys = sum(country_gbd_dalys$val)
country_gbd_dalys <- country_gbd_dalys %>%
mutate(percentage_contribution = val / total_dalys)
percent_contr = rbind(percent_contr, country_gbd_dalys)
}
source('C:/Users/Matth/Desktop/INFO478/info478-project/eda/causes.R')
source('C:/Users/Matth/Desktop/INFO478/info478-project/eda/causes.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("dalys.R")
source("dalys.R")
source("dalys.R")
water <- read.csv("./water2.csv")
gbd <- read.csv("./IHME-GBD_2017_DATA-9836e5da-2.csv")
dalys_new <- gbd %>%
filter(measure == "DALYs (Disability-Adjusted Life Years)") %>%
filter(metric == "Percent") %>%
arrange(-val) %>%
filter(cause != "All causes")
water_quality <- water %>%
select(location = Geographic.Area,
limited_water = X2017_Proportion.of.population.using.limited.drinking.water.services,
unimproved_water = X2017_Proportion.of.population.using.unimproved.drinking.water.sources
) %>%
filter(!is.na(limited_water), !is.na(unimproved_water))
burden_data <- left_join(dalys_new, water_quality, by = "location") %>%
filter(!is.na(limited_water), !is.na(unimproved_water))
burden_limited <- burden_data %>%
arrange(-X2017_Proportion.of.population.using.limited.drinking.water.services)
burden_limited <- burden_data %>%
arrange(-X2017_Proportion.of.population.using.limited.drinking.water.services)
burden_limited <- burden_data %>%
arrange(-X2017_Proportion.of.population.using.limited.drinking.water.services)
View(gbd)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
